import os
import tempfile
import logging
import pandas as pd
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.environ["BOT_TOKEN"]
AUTHORIZED_IDS_STR = os.environ.get("AUTHORIZED_IDS", "")
AUTHORIZED_USER_IDS = set(map(int, AUTHORIZED_IDS_STR.split(","))) if AUTHORIZED_IDS_STR else set()

# === –°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ ===
PRIORITY_DRINKS = {
    "Espresso",
    "Double espresso decaffeinated",
    "Chocolate Truffle",
    "Sakura Latte",
    "Matcha Latte",
    "Berry RAF",
    "Kakao Banana",
    "Masala Tea Latte",
    "Cheese & Orange Latte",
    "Double cappuccino vegan",
    "Flat White",
    "Flat White decaffeinated",
    "Flat white vegan",
    "Latte",
    "Latte decaffeinated",
    "Latte vegan",
    "Ice latte",
    "Ice latte decaffeinated",
    "Espresso decaffeinated",
    "Ice latte vegan",
    "Espresso tonic",
    "Espresso tonic decaffeinated",
    "Bumblebee",
    "Tea",
    "Doppio(double espresso)",
    "Americano",
    "Americano decaffeinated",
    "Cappuccino",
    "Cappuccino decaffeinated",
    "Cacao",
    "Hot chocolate",
    "Cappuccino vegan",
    "Double Americano",
    "Double cappuccino"
}
PRIORITY_DRINKS_LOWER = {name.lower().strip() for name in PRIORITY_DRINKS}


def is_authorized(user_id: int) -> bool:
    return not AUTHORIZED_USER_IDS or user_id in AUTHORIZED_USER_IDS


def format_number(x):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç 43.0 ‚Üí '43', 43.5 ‚Üí '43.5'"""
    s = f"{x:.2f}".rstrip('0').rstrip('.')
    return s if s != '' else '0'


def analyze_excel(file_path: str) -> tuple[str, str, pd.DataFrame]:
    df_raw = pd.read_excel(file_path, header=None)

    # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    header_row = None
    for i in range(len(df_raw)):
        if "Denumire marfa" in df_raw.iloc[i].values:
            header_row = i
            break
    if header_row is None:
        raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª ‚Äî –æ—Ç—á—ë—Ç –∫–∞—Å—Å—ã.")

    df = df_raw.iloc[header_row:].copy()
    df.columns = df.iloc[0]
    df = df[1:].reset_index(drop=True)

    # –ò–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ 'Data'
    report_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
    if 'Data' in df.columns:
        non_empty = df['Data'].dropna()
        if not non_empty.empty:
            try:
                report_date = pd.to_datetime(non_empty.iloc[0], dayfirst=True).strftime('%d.%m.%Y')
            except Exception:
                report_date = str(non_empty.iloc[0]).strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    required_cols = ["Denumire marfa", "Cantitate", "Suma cu TVA fƒÉrƒÉ reducere"]
    if not all(col in df.columns for col in required_cols):
        raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã.")

    df = df[required_cols].copy()
    df = df.dropna(subset=["Denumire marfa"])
    df = df[~df["Denumire marfa"].str.contains("Punga", na=False)]

    # –ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏
    df['is_priority'] = df['Denumire marfa'].str.lower().str.strip().isin(PRIORITY_DRINKS_LOWER)

    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è
    result = df.groupby("Denumire marfa").agg(
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("Cantitate", "sum"),
        –°—É–º–º–∞=("Suma cu TVA fƒÉrƒÉ reducere", "sum"),
        is_priority=("is_priority", "any")
    ).round(2)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ, –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã
    result = result.sort_values(['is_priority', '–°—É–º–º–∞'], ascending=[False, False])
    result_for_save = result.drop(columns=['is_priority'])

    # === –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ö–†–ê–°–ò–í–û–ô, –†–û–í–ù–û–ô –¢–ê–ë–õ–ò–¶–´ ===
    text = f"üìÖ –î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞: {report_date}\n\nüìä –û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:\n\n"

    df_display = result_for_save.reset_index()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    max_name_len = df_display["Denumire marfa"].astype(str).str.len().max()
    name_width = max(max_name_len, len("Denumire marfa")) + 2
    qty_width = 12  # –¥–ª—è "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    sum_width = 10  # –¥–ª—è "–°—É–º–º–∞"

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"{'Denumire marfa':<{name_width}} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':>{qty_width}} {'–°—É–º–º–∞':>{sum_width}}"
    lines = [header, "‚îÄ" * len(header)]

    # –°—Ç—Ä–æ–∫–∏
    for _, row in df_display.iterrows():
        name = str(row["Denumire marfa"])
        qty_str = format_number(row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
        sum_str = format_number(row["–°—É–º–º–∞"])
        line = f"{name:<{name_width}} {qty_str:>{qty_width}} {sum_str:>{sum_width}}"
        lines.append(line)

    text += "\n".join(lines)
    return report_date, text, result_for_save


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ .xlsx —Ñ–∞–π–ª —Å –∫–∞—Å—Å–æ–≤—ã–º –æ—Ç—á—ë—Ç–æ–º.")


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    document = update.message.document
    if not document.file_name.endswith('.xlsx'):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return

    try:
        await update.message.reply_text("üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")

        file = await context.bot.get_file(document.file_id)
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp:
            await file.download_to_drive(tmp.name)
            input_path = tmp.name

        report_date, text_report, df_result = analyze_excel(input_path)

        # –ò–º—è –¥–ª—è Excel-—Ñ–∞–π–ª–∞
        safe_date = "".join(c if c.isalnum() or c in "._-" else "_" for c in report_date)
        output_filename = f"–ê–Ω–∞–ª–∏–∑_–æ—Ç—á—ë—Ç–∞_{safe_date}.xlsx"
        output_path = os.path.join(tempfile.gettempdir(), output_filename)
        df_result.to_excel(output_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è)
        if len(text_report) <= 4090:
            await update.message.reply_text(f"```\n{text_report}\n```", parse_mode="MarkdownV2")
        else:
            await update.message.reply_text("üìã –û—Ç—á—ë—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî –≤ —Ñ–∞–π–ª–µ.")

        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel
        with open(output_path, 'rb') as f:
            await update.message.reply_document(document=f, filename=output_filename)

        # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.unlink(input_path)
        os.unlink(output_path)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞:\n{str(e)[:1000]}")


def main():
    logging.basicConfig(level=logging.INFO)
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.MimeType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"), handle_document))
    app.add_handler(MessageHandler(filters.Document.FileExtension("xlsx"), handle_document))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()


if __name__ == "__main__":
    main()
